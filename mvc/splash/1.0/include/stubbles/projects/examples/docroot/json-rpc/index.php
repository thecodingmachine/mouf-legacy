<?php
/**
 * Example HTML page to demonstrate the JSON-RPC processor.
 *
 * In a real-life application, this page would be generated by
 * any other Stubbles processor. We use PHP/HTML here, to
 * demonstrate, how easy it is to the the JSON-RPC part in
 * existing applications.
 *
 * @author  Stephan Schmidt <schst@stubbles.net>
 */
/**
 * Load Stubbles
 */
require '../bootstrap-stubbles.php';

stubClassLoader::load('net::stubbles::ipo::request::stubWebRequest',
                      'net::stubbles::ipo::response::stubBaseResponse',
                      'net::stubbles::ipo::session::stubPHPSession'
);

$request = new stubWebRequest();
$session = new stubPHPSession($request, new stubBaseResponse(), session_name());
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de">
<head>
  <title>JSON-RPC Test</title>
  <script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/yahoo/yahoo-min.js"></script>
  <script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/event/event-min.js"></script>
  <script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/connection/connection-min.js"></script>
  <script type="text/javascript" src="../javascript/json.js"></script>
  <script type="text/javascript" src="../javascript/stub-base.js"></script>
  <script type="text/javascript" src="../javascript/stub-json-rpc.js"></script>
  <script type="text/javascript">
    // make sure, that the session id is used for all requests
    stubbles.json.rpc.appendToURL = '&amp;<?php echo $session->getName(); ?>=<?php echo $session->getId(); ?>';
    stubbles.json.rpc.serviceUrl  = 'jsonrpc.php?processor=jsonrpc';
  </script>
  <script type="text/javascript" src="<?php echo dirname($_SERVER['PHP_SELF']);?>/jsonrpc.php?processor=jsonrpc&amp;__generateProxy=__all"></script>
<script type="text/javascript">
var MathCallbackObj = {
  callback__add: function(id, result, error) {
    alert(result);
  }
};
var math = new stubbles.json.proxy.MathService(MathCallbackObj);

var NameCallbackObj = {
  callback__getName: function(id, result, error) {
    alert(result);
  },
  callback__setName: function(id, result, error) {
    alert('Name succesfully set.')
  }
};
var nameServ = new stubbles.json.proxy.NameService(NameCallbackObj);
</script>
</head>
<body>

<h1>JSON-RPC examples</h1>
<p>
    These examples use the JSON-RPC processor, that exposes any PHP class
    as a JSON-RPC service and automatically generates client stubs.
</p>

<fieldset>
  <legend>Simple JSON-RPC example</legend>
  A: <input type="text" id="a" size="3"/> B: <input type="text" id="b" size="3"/><br/>
  <input type="button" onclick="math.add(document.getElementById('a').value, document.getElementById('b').value);" value="A+B"/>
  <p>
   SMD for this service:<br/>
   <iframe height="50" width="100%" src="<?php echo dirname($_SERVER['PHP_SELF']);?>/jsonrpc.php?processor=jsonrpc&amp;__smd=MathService"></iframe>
  </p>
</fieldset>

<fieldset>
  <legend>Exceptions</legend>
  <input type="button" onclick="math.throwException();" value="Throw an exception on the server"/>
</fieldset>

<fieldset>
  <legend>Stateful JSON-RPC example</legend>
  Name: <input type="text" id="name" size="20"/><br/>
  <input type="button" onclick="nameServ.getName();" value="Get Name"/>
  <input type="button" onclick="nameServ.setName(document.getElementById('name').value);" value="Set Name"/>
  <p>
   SMD for this service:<br/>
   <iframe height="50" width="100%" src="<?php echo dirname($_SERVER['PHP_SELF']);?>/jsonrpc.php?processor=jsonrpc&amp;__smd=NameService"></iframe>
  </p>
</fieldset>
</body>
</html>