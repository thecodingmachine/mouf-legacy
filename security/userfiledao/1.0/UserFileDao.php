<?php

/**
 * The UserFileDao is an implementation of a UserDao, that stores the application users in a simple PHP file.
 * It can be used together with the MoufUserService to provide easy access management to an application.
 * Since the users are stored in a PHP file, this very special DAO does not require a database!
 * 
 * TODO: The DAO can also be used to add/edit/remove users from the file. The users file is dynamically written, but can also be manually edited.
 * 
 * @author David
 * @Component
 */
class UserFileDao implements UserDaoInterface {

	/**
	 * The path to the file containing the list of users and passwords.
	 * The path is relative to the ROOT_PATH. It should not start with a "/".
	 * It is a PHP file, therefore, it is a good idea if it has the ".php" extension.
	 * 
	 * @Property
	 * @Compulsory
	 * @var string
	 */
	public $userFile;

	/**
	 * True if the file has been loaded, false otherwise.
	 * @var boolean
	 */
	private $isFileLoaded;
	
	/**
	 * An array of UserFileBean.
	 * 
	 * @var array<UserFileBean>
	 */
	private $usersAsObjects;
	
	/**
	 * Returns a user from its login and its password, or null if the login or credentials are false.
	 *
	 * @param string $login
	 * @param string $password
	 * @return UserFileBean
	 */
	public function getUserByCredentials($login, $password) {
		$this->load();
		
		$userBean = $this->getUserByLogin($login);
		if ($userBean != null && $userBean->getEncodedPassword() == sha1($password)) {
			return $userBean;
		} else {
			return null;
		}
	}

	/**
	 * Returns a user from its token.
	 *
	 * @param string $token
	 * @return UserInterface
	 */
	public function getUserByToken($token) {
		throw new UserFileDaoException("getUserByToken is not implemented for the UserFileDao.");
	}
	
	/**
	 * Discards a token.
	 *
	 * @param string $token
	 */
	public function discardToken($token) {
		throw new UserFileDaoException("discardToken is not implemented for the UserFileDao.");
	}
	
	/**
	 * Returns a user from its ID
	 *
	 * @param string $id
	 * @return UserInterface
	 */
	public function getUserById($id) {
		// We don't have ID's so ID=login in the UserFileDao.
		return $this->getUserByLogin($login);
	}
	
	/**
	 * Returns a user from its login
	 *
	 * @param string $login
	 * @return UserFileBean
	 */
	public function getUserByLogin($login) {
		$this->load();
		
		if (isset($this->usersAsObjects[$login])) {
			return $this->usersAsObjects[$login];
		}
		return null;
	}
	
	/**
	 * Loads the file containing the users.
	 * Note: you don't have to call the function manually. It will be called for you.
	 * 
	 */	
	public function load() {
		if ($this->isFileLoaded) {
			return;
		}
		if (!$this->isUserFileAvailable()) {
			throw new UserFileDaoException("Could not load the file containing the users: '".ROOT_PATH.$this->userFile."' does not exist or is not writable.");
		}
		
		include ROOT_PATH.$this->userFile;
		
		foreach ($users as $login=>$user) {
			$this->usersAsObjects[$login] = new UserFileBean($login, $user['password'], $user['options']);
		}
	}
	
	/**
	 * Checks whether the file containing the users is available or not.
	 * @return Returns true on success, false if the file is missing or not readable.
	 */
	public function isUserFileAvailable() {
		return is_readable(ROOT_PATH.$this->userFile);
	}
	
	/**
	 * Writes the file containing the user list.
	 */
	public function write() {
		if (!is_writable(dirname(ROOT_PATH.$this->userFile)) || (file_exists(ROOT_PATH.$this->userFile) && !is_writable(ROOT_PATH.$this->userFile))) {
			throw new MoufException("Error, unable to write file ".ROOT_PATH.$this->userFile);
		}
		
		$fp = fopen(ROOT_PATH.$this->userFile, "w");
		fwrite($fp, "<?php\n");
		fwrite($fp, "/**\n");
		fwrite($fp, " * This is a file automatically generated by the Mouf framework. Do not modify its structure, as it could be overwritten.\n");
		fwrite($fp, " * You can however safely add new users, modify users or change passwords.\n");
		fwrite($fp, " */\n");
		fwrite($fp, "\n");
		foreach ($this->usersAsObjects as $login=>$userBean) {
			/* @var $userBean FileUserBean  */
			fwrite($fp, "\$users[".var_export($login, true)."] = array('password'=>".var_export($userBean->getEncodedPassword(), true).", 'options'=>".var_export($userBean->getOptions(), true).");\n");
		}
		fclose($fp);
	}
}